package cloudformation

type AWS struct {
}

func (self *AWS) NewResourceInput(typeName string) ResourceProperties {
	switch typeName {
	case "AWS::ApiGateway::Account":
		return &ApiGatewayAccount{}
	case "AWS::ApiGateway::ApiKey":
		return &ApiGatewayApiKey{}
	case "AWS::ApiGateway::Authorizer":
		return &ApiGatewayAuthorizer{}
	case "AWS::ApiGateway::BasePathMapping":
		return &ApiGatewayBasePathMapping{}
	case "AWS::ApiGateway::ClientCertificate":
		return &ApiGatewayClientCertificate{}
	case "AWS::ApiGateway::Deployment":
		return &ApiGatewayDeployment{}
	case "AWS::ApiGateway::Method":
		return &ApiGatewayMethod{}
	case "AWS::ApiGateway::Model":
		return &ApiGatewayModel{}
	case "AWS::ApiGateway::Resource":
		return &ApiGatewayResource{}
	case "AWS::ApiGateway::RestApi":
		return &ApiGatewayRestApi{}
	case "AWS::ApiGateway::Stage":
		return &ApiGatewayStage{}
	case "AWS::ApiGateway::UsagePlan":
		return &ApiGatewayUsagePlan{}
	case "AWS::ApiGateway::UsagePlanKey":
		return &ApiGatewayUsagePlanKey{}
	case "AWS::ApplicationAutoScaling::ScalableTarget":
		return &ApplicationAutoScalingScalableTarget{}
	case "AWS::ApplicationAutoScaling::ScalingPolicy":
		return &ApplicationAutoScalingScalingPolicy{}
	case "AWS::AutoScaling::AutoScalingGroup":
		return &AutoScalingAutoScalingGroup{}
	case "AWS::AutoScaling::LaunchConfiguration":
		return &AutoScalingLaunchConfiguration{}
	case "AWS::AutoScaling::LifecycleHook":
		return &AutoScalingLifecycleHook{}
	case "AWS::AutoScaling::ScalingPolicy":
		return &AutoScalingScalingPolicy{}
	case "AWS::AutoScaling::ScheduledAction":
		return &AutoScalingScheduledAction{}
	case "AWS::CertificateManager::Certificate":
		return &CertificateManagerCertificate{}
	case "AWS::CloudFormation::Authentication":
		return &CloudFormationAuthentication{}
	case "AWS::CloudFormation::CustomResource":
		return &CloudFormationCustomResource{}
	case "AWS::CloudFormation::Init":
		return &CloudFormationInit{}
	case "AWS::CloudFormation::Interface":
		return &CloudFormationInterface{}
	case "AWS::CloudFormation::Stack":
		return &CloudFormationStack{}
	case "AWS::CloudFormation::WaitCondition":
		return &CloudFormationWaitCondition{}
	case "AWS::CloudFormation::WaitConditionHandle":
		return &CloudFormationWaitConditionHandle{}
	case "AWS::CloudFront::Distribution":
		return &CloudFrontDistribution{}
	case "AWS::CloudTrail::Trail":
		return &CloudTrailTrail{}
	case "AWS::CloudWatch::Alarm":
		return &CloudWatchAlarm{}
	case "AWS::CodeBuild::Project":
		return &CodeBuildProject{}
	case "AWS::CodeCommit::Repository":
		return &CodeCommitRepository{}
	case "AWS::CodeDeploy::Application":
		return &CodeDeployApplication{}
	case "AWS::CodeDeploy::DeploymentConfig":
		return &CodeDeployDeploymentConfig{}
	case "AWS::CodeDeploy::DeploymentGroup":
		return &CodeDeployDeploymentGroup{}
	case "AWS::CodePipeline::CustomActionType":
		return &CodePipelineCustomAction{}
	case "AWS::CodePipeline::Pipeline":
		return &CodePipelinePipeline{}
	case "AWS::Config::ConfigRule":
		return &ConfigConfigRule{}
	case "AWS::Config::ConfigurationRecorder":
		return &ConfigConfigurationRecorder{}
	case "AWS::Config::DeliveryChannel":
		return &ConfigDeliveryChannel{}
	case "AWS::DataPipeline::Pipeline":
		return &DataPipelinePipeline{}
	case "AWS::DirectoryService::MicrosoftAD":
		return &DirectoryServiceMicrosoftAD{}
	case "AWS::DirectoryService::SimpleAD":
		return &DirectoryServiceSimpleAD{}
	case "AWS::DynamoDB::Table":
		return &DynamoDBTable{}
	case "AWS::EC2::CustomerGateway":
		return &EC2CustomerGateway{}
	case "AWS::EC2::DHCPOptions":
		return &EC2DHCPOptions{}
	case "AWS::EC2::EIP":
		return &EC2EIP{}
	case "AWS::EC2::EIPAssociation":
		return &EC2EIPAssociation{}
	case "AWS::EC2::FlowLog":
		return &EC2FlowLog{}
	case "AWS::EC2::Host":
		return &EC2Host{}
	case "AWS::EC2::Instance":
		return &EC2Instance{}
	case "AWS::EC2::InternetGateway":
		return &EC2InternetGateway{}
	case "AWS::EC2::NatGateway":
		return &EC2NatGateway{}
	case "AWS::EC2::NetworkAcl":
		return &EC2NetworkAcl{}
	case "AWS::EC2::NetworkAclEntry":
		return &EC2NetworkAclEntry{}
	case "AWS::EC2::NetworkInterface":
		return &EC2NetworkInterface{}
	case "AWS::EC2::NetworkInterfaceAttachment":
		return &EC2NetworkInterfaceAttachment{}
	case "AWS::EC2::PlacementGroup":
		return &EC2PlacementGroup{}
	case "AWS::EC2::Route":
		return &EC2Route{}
	case "AWS::EC2::RouteTable":
		return &EC2RouteTable{}
	case "AWS::EC2::SecurityGroup":
		return &EC2SecurityGroup{}
	case "AWS::EC2::SecurityGroupEgress":
		return &EC2SecurityGroupEgress{}
	case "AWS::EC2::SecurityGroupIngress":
		return &EC2SecurityGroupIngress{}
	case "AWS::EC2::SpotFleet":
		return &EC2SpotFleet{}
	case "AWS::EC2::Subnet":
		return &EC2Subnet{}
	case "AWS::EC2::SubnetCidrBlock":
		return &EC2SubnetCidrBlock{}
	case "AWS::EC2::SubnetNetworkAclAssociation":
		return &EC2SubnetNetworkAclAssociation{}
	case "AWS::EC2::SubnetRouteTableAssociation":
		return &EC2SubnetRouteTableAssociation{}
	case "AWS::EC2::Volume":
		return &EC2Volume{}
	case "AWS::EC2::VolumeAttachment":
		return &EC2VolumeAttachment{}
	case "AWS::EC2::VPC":
		return &EC2VPC{}
	case "AWS::EC2::VPCCidrBlock":
		return &EC2VPCCidrBlock{}
	case "AWS::EC2::VPCDHCPOptionsAssociation":
		return &EC2VPCDHCPOptionsAssociation{}
	case "AWS::EC2::VPCEndpoint":
		return &EC2VPCEndpoint{}
	case "AWS::EC2::VPCGatewayAttachment":
		return &EC2VPCGatewayAttachment{}
	case "AWS::EC2::VPCPeeringConnection":
		return &EC2VPCPeeringConnection{}
	case "AWS::EC2::VPNConnection":
		return &EC2VPNConnection{}
	case "AWS::EC2::VPNConnectionRoute":
		return &EC2VPNConnectionRoute{}
	case "AWS::EC2::VPNGateway":
		return &EC2VPNGateway{}
	case "AWS::EC2::VPNGatewayRoutePropagation":
		return &EC2VPNGatewayRoutePropagation{}
	case "AWS::ECR::Repository":
		return &ECRRepository{}
	case "AWS::ECS::Cluster":
		return &ECSCluster{}
	case "AWS::ECS::Service":
		return &ECSService{}
	case "AWS::ECS::TaskDefinition":
		return &ECSTaskDefinition{}
	case "AWS::EFS::FileSystem":
		return &EFSFileSystem{}
	case "AWS::EFS::MountTarget":
		return &EFSMountTarget{}
	case "AWS::ElastiCache::CacheCluster":
		return &ElastiCacheCacheCluster{}
	case "AWS::ElastiCache::ParameterGroup":
		return &ElastiCacheParameterGroup{}
	case "AWS::ElastiCache::ReplicationGroup":
		return &ElastiCacheReplicationGroup{}
	case "AWS::ElastiCache::SecurityGroup":
		return &ElastiCacheSecurityGroup{}
	case "AWS::ElastiCache::SecurityGroupIngress":
		return &ElastiCacheSecurityGroupIngress{}
	case "AWS::ElastiCache::SubnetGroup":
		return &ElastiCacheSubnetGroup{}
	case "AWS::ElasticBeanstalk::Application":
		return &ElasticBeanstalkApplication{}
	case "AWS::ElasticBeanstalk::ApplicationVersion":
		return &ElasticBeanstalkApplicationVersion{}
	case "AWS::ElasticBeanstalk::ConfigurationTemplate":
		return &ElasticBeanstalkConfigurationTemplate{}
	case "AWS::ElasticBeanstalk::Environment":
		return &ElasticBeanstalkEnvironment{}
	case "AWS::ElasticLoadBalancing::LoadBalancer":
		return &ElasticLoadBalancingLoadBalancer{}
	case "AWS::ElasticLoadBalancingV2::Listener":
		return &ElasticLoadBalancingV2Listener{}
	case "AWS::ElasticLoadBalancingV2::ListenerRule":
		return &ElasticLoadBalancingV2ListenerRule{}
	case "AWS::ElasticLoadBalancingV2::LoadBalancer":
		return &ElasticLoadBalancingV2LoadBalancer{}
	case "AWS::ElasticLoadBalancingV2::TargetGroup":
		return &ElasticLoadBalancingV2TargetGroup{}
	case "AWS::Elasticsearch::Domain":
		return &ElasticsearchDomain{}
	case "AWS::EMR::Cluster":
		return &EMRCluster{}
	case "AWS::EMR::InstanceGroupConfig":
		return &EMRInstanceGroupConfig{}
	case "AWS::EMR::Step":
		return &EMRStep{}
	case "AWS::Events::Rule":
		return &EventsRule{}
	case "AWS::GameLift::Alias":
		return &GameLiftAlias{}
	case "AWS::GameLift::Build":
		return &GameLiftBuild{}
	case "AWS::GameLift::Fleet":
		return &GameLiftFleet{}
	case "AWS::IAM::AccessKey":
		return &IAMAccessKey{}
	case "AWS::IAM::Group":
		return &IAMGroup{}
	case "AWS::IAM::InstanceProfile":
		return &IAMInstanceProfile{}
	case "AWS::IAM::ManagedPolicy":
		return &IAMManagedPolicy{}
	case "AWS::IAM::Policy":
		return &IAMPolicy{}
	case "AWS::IAM::Role":
		return &IAMRole{}
	case "AWS::IAM::User":
		return &IAMUser{}
	case "AWS::IAM::UserToGroupAddition":
		return &IAMUserToGroupAddition{}
	case "AWS::IoT::Certificate":
		return &IoTCertificate{}
	case "AWS::IoT::Policy":
		return &IoTPolicy{}
	case "AWS::IoT::PolicyPrincipalAttachment":
		return &IoTPolicyPrincipalAttachment{}
	case "AWS::IoT::Thing":
		return &IoTThing{}
	case "AWS::IoT::ThingPrincipalAttachment":
		return &IoTThingPrincipalAttachment{}
	case "AWS::IoT::TopicRule":
		return &IoTTopicRule{}
	case "AWS::Kinesis::Stream":
		return &KinesisStream{}
	case "AWS::KinesisFirehose::DeliveryStream":
		return &KinesisFirehoseDeliveryStream{}
	case "AWS::KMS::Alias":
		return &KMSAlias{}
	case "AWS::KMS::Key":
		return &KMSKey{}
	case "AWS::Lambda::EventSourceMapping":
		return &LambdaEventSourceMapping{}
	case "AWS::Lambda::Alias":
		return &LambdaAlias{}
	case "AWS::Lambda::Function":
		return &LambdaFunction{}
	case "AWS::Lambda::Permission":
		return &LambdaPermission{}
	case "AWS::Lambda::Version":
		return &LambdaVersion{}
	case "AWS::Logs::Destination":
		return &LogsDestination{}
	case "AWS::Logs::LogGroup":
		return &LogsLogGroup{}
	case "AWS::Logs::LogStream":
		return &LogsLogStream{}
	case "AWS::Logs::MetricFilter":
		return &LogsMetricFilter{}
	case "AWS::Logs::SubscriptionFilter":
		return &LogsSubscriptionFilter{}
	case "AWS::OpsWorks::App":
		return &OpsWorksApp{}
	case "AWS::OpsWorks::ElasticLoadBalancerAttachment":
		return &OpsWorksElasticLoadBalancerAttachment{}
	case "AWS::OpsWorks::Instance":
		return &OpsWorksInstance{}
	case "AWS::OpsWorks::Layer":
		return &OpsWorksLayer{}
	case "AWS::OpsWorks::Stack":
		return &OpsWorksStack{}
	case "AWS::OpsWorks::UserProfile":
		return &OpsWorksUserProfile{}
	case "AWS::OpsWorks::Volume":
		return &OpsWorksVolume{}
	case "AWS::RDS::DBCluster":
		return &RDSDBCluster{}
	case "AWS::RDS::DBClusterParameterGroup":
		return &RDSDBClusterParameterGroup{}
	case "AWS::RDS::DBInstance":
		return &RDSDBInstance{}
	case "AWS::RDS::DBParameterGroup":
		return &RDSDBParameterGroup{}
	case "AWS::RDS::DBSecurityGroup":
		return &RDSDBSecurityGroup{}
	case "AWS::RDS::DBSecurityGroupIngress":
		return &RDSDBSecurityGroupIngress{}
	case "AWS::RDS::DBSubnetGroup":
		return &RDSDBSubnetGroup{}
	case "AWS::RDS::EventSubscription":
		return &RDSEventSubscription{}
	case "AWS::RDS::OptionGroup":
		return &RDSOptionGroup{}
	case "AWS::Redshift::Cluster":
		return &RedshiftCluster{}
	case "AWS::Redshift::ClusterParameterGroup":
		return &RedshiftClusterParameterGroup{}
	case "AWS::Redshift::ClusterSecurityGroup":
		return &RedshiftClusterSecurityGroup{}
	case "AWS::Redshift::ClusterSecurityGroupIngress":
		return &RedshiftClusterSecurityGroupIngress{}
	case "AWS::Redshift::ClusterSubnetGroup":
		return &RedshiftClusterSubnetGroup{}
	case "AWS::Route53::HealthCheck":
		return &Route53HealthCheck{}
	case "AWS::Route53::HostedZone":
		return &Route53HostedZone{}
	case "AWS::Route53::RecordSet":
		return &Route53RecordSet{}
	case "AWS::Route53::RecordSetGroup":
		return &Route53RecordSetGroup{}
	case "AWS::S3::Bucket":
		return &S3Bucket{}
	case "AWS::S3::BucketPolicy":
		return &S3BucketPolicy{}
	case "AWS::SDB::Domain":
		return &SDBDomain{}
	case "AWS::SNS::Subscription":
		return &SNSSubscription{}
	case "AWS::SNS::Topic":
		return &SNSTopic{}
	case "AWS::SNS::TopicPolicy":
		return &SNSTopicPolicy{}
	case "AWS::SQS::Queue":
		return &SQSQueue{}
	case "AWS::SQS::QueuePolicy":
		return &SQSQueuePolicy{}
	case "AWS::SSM::Association":
		return &SSMAssociation{}
	case "AWS::SSM::Document":
		return &SSMDocument{}
	case "AWS::SSM::Parameter":
		return &SSMParameter{}
	case "AWS::StepFunctions::Activity":
		return &StepFunctionsActivity{}
	case "AWS::StepFunctions::StateMachine":
		return &StepFunctionsStateMachine{}
	case "AWS::WAF::ByteMatchSet":
		return &WAFByteMatchSet{}
	case "AWS::WAF::IPSet":
		return &WAFIPSet{}
	case "AWS::WAF::Rule":
		return &WAFRule{}
	case "AWS::WAF::SizeConstraintSet":
		return &WAFSizeConstraintSet{}
	case "AWS::WAF::SqlInjectionMatchSet":
		return &WAFSqlInjectionMatchSet{}
	case "AWS::WAF::WebACL":
		return &WAFWebACL{}
	case "AWS::WAF::XssMatchSet":
		return &WAFXssMatchSet{}
	case "AWS::WorkSpaces::Workspace":
		return &WorkSpacesWorkspace{}

	default:
		for _, eachProvider := range customResourceProviders {
			customType := eachProvider(typeName)
			if nil != customType {
				return customType
			}
		}
	}
	return nil
}
